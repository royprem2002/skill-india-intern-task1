import cv2
import numpy as np
from sklearn.cluster import KMeans

# Function to extract dominant colors from an image
def extract_dominant_colors(image_path, k=3):
    # Load the image
    image = cv2.imread(image_path)
    
    # Convert the image from BGR to RGB (OpenCV loads images in BGR format)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Reshape the image to be a list of pixels
    pixels = image_rgb.reshape(-1, 3)
    
    # Apply K-means clustering to find dominant colors
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(pixels)
    
    # Get the RGB values of the cluster centers (dominant colors)
    dominant_colors = kmeans.cluster_centers_
    
    # Convert the dominant colors to integers
    dominant_colors = dominant_colors.astype(int)
    
    return dominant_colors

# Example usage:
image_path = 'your_image.jpg'
dominant_colors = extract_dominant_colors(image_path)

# Display the dominant colors
for color in dominant_colors:
    print(f"RGB: {color[0]}, {color[1]}, {color[2]}")

# Optionally, you can display a pie chart of the dominant colors
import matplotlib.pyplot as plt

labels = [f"Color {i+1}" for i in range(len(dominant_colors))]
sizes = [1] * len(dominant_colors)

fig, ax = plt.subplots()
ax.pie(sizes, labels=labels, colors=[color / 255 for color in dominant_colors], autopct='%1.1f%%')
ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()
